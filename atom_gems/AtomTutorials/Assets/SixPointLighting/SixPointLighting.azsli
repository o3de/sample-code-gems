/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// Include options first
#include <Atom/Features/PBR/LightingOptions.azsli>

// Then include custom surface and lighting data types
#include <Atom/Features/PBR/Lighting/LightingData.azsli>
#include <SixPointSurface.azsli>

#include <Atom/Features/PBR/LightingUtils.azsli>
#include <Atom/Features/PBR/Microfacet/Brdf.azsli>
#include <Atom/RPI/TangentSpace.azsli>

float ComputeLightMap(const float3 dirToLightWS, const Surface surface)
{
    float3 dirToLightTS = WorldSpaceToTangent(dirToLightWS, surface.normal, surface.tangent, surface.bitangent);
    float hMap = (dirToLightTS.x > 0.0f) ? (surface.right) : (surface.left);   // Picks the correct horizontal side.
    float vMap = (dirToLightTS.y > 0.0f) ? (surface.bottom) : (surface.top);   // Picks the correct vertical side.
    float dMap = (dirToLightTS.z > 0.0f) ? (surface.frontside) : (surface.backside);  // Picks the correct front/back side
    float lightMap = hMap*dirToLightTS.x*dirToLightTS.x + vMap*dirToLightTS.y*dirToLightTS.y + dMap*dirToLightTS.z*dirToLightTS.z; // Pythagoras!
    return lightMap;
}

// Then define the Diffuse and Specular lighting functions
float3 GetDiffuseLighting(Surface surface, LightingData lightingData, float3 lightIntensity, float3 dirToLight)
{
    float lightMap = ComputeLightMap(dirToLight, surface);
    float3 diffuse = lightMap.rrr;
    
    diffuse *= lightIntensity;
    return diffuse;
}

float3 GetSpecularLighting(Surface surface, LightingData lightingData, const float3 lightIntensity, const float3 dirToLight)
{
    return float3(0.0f, 0.0f, 0.0f);
}

// Then include everything else
#include <Atom/Features/PBR/Lights/Lights.azsli>

#include <Atom/Features/Debug.azsli>

#include <Atom/RPI/Math.azsli>
#include <Atom/Features/PBR/Lights/LightTypesCommon.azsli>

// Include IBL functions
float3 GetIblSample(Surface surface, float3 direction) 
{
    float3 irradianceDir = TangentSpaceToWorld(direction, surface.normal, surface.tangent, surface.bitangent);
    irradianceDir = MultiplyVectorQuaternion(irradianceDir, SceneSrg::m_iblOrientation);
    float3 diffuseSample = SceneSrg::m_diffuseEnvMap.Sample(SceneSrg::m_samplerEnv, GetCubemapCoords(irradianceDir)).rgb;

    return diffuseSample;
}

float3 GetIblDiffuse(Surface surface, float3 diffuseResponse)
{
    float3 rightSample = GetIblSample(surface, float3(1.0f, 0.0f, 0.0f));
    float3 leftSample = GetIblSample(surface, float3(-1.0f, 0.0f, 0.0f));
    float3 topSample = GetIblSample(surface, float3(0.0f, -1.0f, 0.0f));
    float3 bottomSample = GetIblSample(surface, float3(0.0f, 1.0f, 0.0f));
    float3 frontsideSample = GetIblSample(surface, float3(0.0f, 0.0f, 1.0f));
    float3 backsideSample = GetIblSample(surface, float3(0.0f, 0.0f, -1.0f));

    float3 totalDiffuseSample = (leftSample * surface.left) 
                                + (rightSample * surface.right) 
                                + (topSample * surface.top) 
                                + (bottomSample * surface.bottom) 
                                + (frontsideSample * surface.frontside) 
                                + (backsideSample * surface.backside);

    return diffuseResponse * surface.albedo * totalDiffuseSample;
}

void ApplyIBL(Surface surface, inout LightingData lightingData)
{
    bool useIbl = o_enableIBL && IsIndirectLightingEnabled();

#ifdef FORCE_IBL_IN_FORWARD_PASS
    bool useDiffuseIbl = true;
#else
    bool isTransparent = (o_opacity_mode == OpacityMode::Blended || o_opacity_mode == OpacityMode::TintedTransparent);
    bool useDiffuseIbl = isTransparent;
    useIbl = useIbl && useDiffuseIbl;
#endif

    if(useIbl)
    {
        float globalIblExposure = pow(2.0, SceneSrg::m_iblExposure);
        
        if(useDiffuseIbl)
        {
            float3 iblDiffuse = GetIblDiffuse(surface, lightingData.diffuseResponse);
            lightingData.diffuseLighting += (iblDiffuse * globalIblExposure * lightingData.diffuseAmbientOcclusion);
        }
    }
}

struct PbrLightingOutput
{
    float4 m_diffuseColor;
    float4 m_specularColor;
    float4 m_albedo;
    float4 m_specularF0;
    float4 m_normal;
};


PbrLightingOutput GetPbrLightingOutput(Surface surface, LightingData lightingData, float alpha)
{
    PbrLightingOutput lightingOutput;

    lightingOutput.m_diffuseColor = float4(lightingData.diffuseLighting, alpha);
    lightingOutput.m_specularColor = float4(lightingData.specularLighting, 1.0);

    // albedo, specularF0, roughness, and normals for later passes (specular IBL, Diffuse GI, SSR, AO, etc)
    lightingOutput.m_specularF0 = float4(0.0f, 0.0f, 0.0f, surface.roughnessLinear);
    lightingOutput.m_albedo.rgb = float3(1.0f, 1.0f, 1.0f) * lightingData.diffuseResponse * lightingData.diffuseAmbientOcclusion;
    lightingOutput.m_albedo.a = lightingData.specularOcclusion;
    lightingOutput.m_normal.rgb = EncodeNormalSignedOctahedron(surface.normal);
    lightingOutput.m_normal.a = 0.0f;
    
    return lightingOutput;
}

PbrLightingOutput DebugOutput(float3 color)
{
    PbrLightingOutput output = (PbrLightingOutput)0;

    float3 defaultNormal = float3(0.0f, 0.0f, 1.0f);

    output.m_diffuseColor = float4(color.rgb, 1.0f);
    output.m_normal.rgb = EncodeNormalSignedOctahedron(defaultNormal);

    return output;
}
