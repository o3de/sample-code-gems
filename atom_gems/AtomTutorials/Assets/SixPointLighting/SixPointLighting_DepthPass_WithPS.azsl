/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include "./SixPointLighting_Common.azsli"
#include <Atom/Features/PBR/DefaultObjectSrg.azsli>

#include "Atom/Feature/Common/Assets/Materials/Types/MaterialFunctions/EvaluateTangentFrame.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialFunctions/StandardGetNormalToWorld.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialFunctions/StandardGetObjectToWorld.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialFunctions/StandardGetAlphaAndClip.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialFunctions/StandardTransformUvs.azsli"

struct VSInput
{
    float3 m_position : POSITION;
    float2 m_uv0 : UV0;
    float2 m_uv1 : UV1;

    // only used for parallax depth calculation
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
};
 
struct VSDepthOutput
{
    // "centroid" is needed for SV_Depth to compile
    precise linear centroid float4 m_position : SV_Position;
    float2 m_uv[UvSetCount] : UV1;

    // only used for parallax depth calculation
    float3 m_normal : NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float3 m_worldPosition : UV0;
};

VSDepthOutput MainVS(VSInput IN)
{
    VSDepthOutput OUT;
 
    float4x4 objectToWorld = GetObjectToWorld();
    float4 worldPosition = mul(objectToWorld, float4(IN.m_position, 1.0));

    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, worldPosition);

    float2 uvs[UvSetCount] = { IN.m_uv0, IN.m_uv1 };
    TransformUvs(uvs, OUT.m_uv);

    return OUT;
}

struct PSDepthOutput
{
    precise float m_depth : SV_Depth;
};

PSDepthOutput MainPS(VSDepthOutput IN, bool isFrontFace : SV_IsFrontFace)
{
    const float3 vertexNormal = normalize(IN.m_normal);

    PSDepthOutput OUT;

    OUT.m_depth = IN.m_position.z;
    
    float2 sixPointUv = GetUvForCurrentFrame(IN.m_uv[0]);
    float alpha = MaterialSrg::m_opacityMap.Sample(MaterialSrg::m_sampler, sixPointUv).r;
    
    if(o_enableDepthTexture)
    {
        float depthOffset = MaterialSrg::m_depthMap.Sample(MaterialSrg::m_sampler, sixPointUv).r;
        OUT.m_depth += depthOffset;
    }

    return OUT;
}

