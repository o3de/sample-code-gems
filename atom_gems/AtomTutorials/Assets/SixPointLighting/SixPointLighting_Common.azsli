/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once 

#include <Atom/Features/SrgSemantics.azsli>
#include <viewsrg.srgi>
#include <scenesrg.srgi>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>
#include <Atom/Features/PBR/LightingOptions.azsli>
#include <Atom/Features/PBR/AlphaUtils.azsli>

#include "Atom/Feature/Common/Assets/Materials/Types/MaterialInputs/BaseColorInput.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialInputs/RoughnessInput.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialInputs/MetallicInput.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialInputs/SpecularInput.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialInputs/NormalInput.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialInputs/ClearCoatInput.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialInputs/OcclusionInput.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialInputs/EmissiveInput.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialInputs/UvSetCount.azsli"

ShaderResourceGroup MaterialSrg : SRG_PerMaterial
{
    Texture2D m_topLeftRightBottomMap;
    Texture2D m_frontBackMap;
    Texture2D m_rightLeftTopMap;
    Texture2D m_bottomBackFrontMap;
    Texture2D m_depthMap;
    float m_depthScale;
    float m_rowCount;
    float m_columnCount;
    float m_debugFrame;

    // Auto-generate material SRG fields for common inputs
    COMMON_SRG_INPUTS_BASE_COLOR()
    COMMON_SRG_INPUTS_ROUGHNESS()
    COMMON_SRG_INPUTS_METALLIC()
    COMMON_SRG_INPUTS_SPECULAR_F0()
    COMMON_SRG_INPUTS_NORMAL()
    COMMON_SRG_INPUTS_CLEAR_COAT()
    COMMON_SRG_INPUTS_OCCLUSION()
    COMMON_SRG_INPUTS_EMISSIVE()

    float3x3 m_uvMatrix;
    float4 m_pad1; // [GFX TODO][ATOM-14595] This is a workaround for a data stomping bug. Remove once it's fixed.
    float3x3 m_uvMatrixInverse;
    float4 m_pad2; // [GFX TODO][ATOM-14595] This is a workaround for a data stomping bug. Remove once it's fixed.

    float m_opacityFactor;
    float m_opacityAffectsSpecularFactor;
    Texture2D m_opacityMap;
    uint m_opacityMapUvIndex;

    Sampler m_sampler
    {
        AddressU = Wrap;
        AddressV = Wrap;
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        MaxAnisotropy = 16;
    };

    Texture2D m_brdfMap;

    Sampler m_samplerBrdf
    {
        AddressU = Clamp;
        AddressV = Clamp;
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
    };
}

// Allows you to specify a specific frame of the flipbook to render in MaterialSrg::m_debugFrame
option bool o_enableDebugFrame = false;
option bool o_enableDepthTexture = false;

float2 GetUvForCurrentFrame(float2 baseUv)
{
    // Fixed frequency of 30hz
    // Get the current frame
    float frame = (float)(((double)SceneSrg::m_time / (33.3333)) * 1000.0) % (MaterialSrg::m_columnCount * MaterialSrg::m_rowCount);
    if(o_enableDebugFrame)
    {
        // The frame input by the material is 1-indexed, so subtract 1 here to make it 0-indexed
        frame = MaterialSrg::m_debugFrame - 1.0f;
    }
    // Get the row/column of the frame
    float frameColumn = floor(frame % MaterialSrg::m_columnCount);
    float frameRow = floor(frame / MaterialSrg::m_columnCount) % MaterialSrg::m_rowCount;
    
    float2 invColumnRowCounts = float2(1.0f, 1.0f) / float2(MaterialSrg::m_columnCount, MaterialSrg::m_rowCount);
    float2 sixPointUv = (baseUv + float2(frameColumn, frameRow)) * invColumnRowCounts;

    return sixPointUv;
}