/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <../SixPointSurface.azsli>
#include <Atom/Features/MatrixUtility.azsli>

void EvaluateSixPointSurface(
    float3 vertexNormal,
    float2 uv[UvSetCount],
    float3 tangents[UvSetCount],
    float3 bitangents[UvSetCount],
    bool isFrontFace,
    bool displacementIsClipped,
    inout Surface surface)
{
    // ------- Base Color -------
    float2 baseColorUv = uv[MaterialSrg::m_baseColorMapUvIndex];
    float3 sampledColor = GetBaseColorInput(MaterialSrg::m_baseColorMap, MaterialSrg::m_sampler, baseColorUv, MaterialSrg::m_baseColor.rgb, o_baseColor_useTexture);
    float3 baseColor = BlendBaseColor(sampledColor, MaterialSrg::m_baseColor.rgb, MaterialSrg::m_baseColorFactor, o_baseColorTextureBlendMode, o_baseColor_useTexture);
    
    // ------- Metallic -------
    float metallic = MaterialSrg::m_metallicFactor;

    // ------- Specular -------
    float specularF0Factor = MaterialSrg::m_specularF0Factor;
    surface.SetAlbedoAndSpecularF0(baseColor, specularF0Factor, metallic);

    // ------- Roughness -------
    surface.roughnessLinear = MaterialSrg::m_roughnessFactor;;
    surface.CalculateRoughnessA();
    
    // ------- Clearcoat -------
    surface.clearCoat.InitializeToZero();
} 
