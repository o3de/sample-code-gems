/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include "Atom/Features/ShaderQualityOptions.azsli"

#include "SixPointLighting_Common.azsli"

// SRGs
#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/Features/PBR/ForwardPassSrg.azsli>

// Pass Output
#include <Atom/Features/PBR/ForwardPassOutput.azsli>

// Utility
#include <Atom/Features/ColorManagement/TransformColor.azsli>
#include <Atom/Features/PBR/AlphaUtils.azsli>

// Custom Surface & Lighting
#include <SixPointLighting.azsli>

// Decals
#include <Atom/Features/PBR/Decals.azsli>

// ---------- Material Parameters ----------

COMMON_OPTIONS_BASE_COLOR()
COMMON_OPTIONS_ROUGHNESS()
COMMON_OPTIONS_METALLIC()
COMMON_OPTIONS_SPECULAR_F0()
COMMON_OPTIONS_NORMAL()
COMMON_OPTIONS_CLEAR_COAT()
COMMON_OPTIONS_OCCLUSION()
COMMON_OPTIONS_EMISSIVE()

enum class SixPointTexturePackMode { TpLftRtBt_FrBck, RtLftTp_BtBckFr };
option SixPointTexturePackMode o_sixPointTexturePackMode = SixPointTexturePackMode::TpLftRtBt_FrBck;

// Alpha
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialInputs/AlphaInput.azsli"

#include "MaterialFunctions/EvaluateSixPointSurface.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialFunctions/EvaluateTangentFrame.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialFunctions/StandardGetNormalToWorld.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialFunctions/StandardGetObjectToWorld.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialFunctions/StandardGetAlphaAndClip.azsli"
#include "Atom/Feature/Common/Assets/Materials/Types/MaterialFunctions/StandardTransformUvs.azsli"


// ---------- Vertex Shader ----------

struct VSInput
{
    // Base fields (required by the template azsli file)...
    float3 m_position : POSITION;
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
 
    // Extended fields (only referenced in this azsl file)...
    float2 m_uv0 : UV0;
    float2 m_uv1 : UV1;
};

struct VSOutput
{
    // Base fields (required by the template azsli file)...
    // "centroid" is needed for SV_Depth to compile
    precise linear centroid float4 m_position : SV_Position;
    float3 m_normal: NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float3 m_worldPosition : UV0;

    // Extended fields (only referenced in this azsl file)...
    float2 m_uv[UvSetCount] : UV1;
};

#include <Atom/Features/Vertex/VertexHelper.azsli>

VSOutput SixPointLighting_ForwardPassVS(VSInput IN)
{
    VSOutput OUT;

    float4x4 objectToWorld = GetObjectToWorld();
    float4 worldPosition = mul(objectToWorld, float4(IN.m_position, 1.0));
    OUT.m_worldPosition = worldPosition.xyz;
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, worldPosition);

    float2 uvs[UvSetCount] = { IN.m_uv0, IN.m_uv1 };
    TransformUvs(uvs, OUT.m_uv);

    VertexHelper(IN, OUT, worldPosition, false);

    return OUT;
}

// ---------- Pixel Shader ----------

PbrLightingOutput ForwardPassPS_Common(VSOutput IN, bool isFrontFace, out float depthNDC)
{
    const float3 vertexNormal = normalize(IN.m_normal);

    // ------- Tangents & Bitangents -------
    float3 tangents[UvSetCount] = { IN.m_tangent, IN.m_tangent };
    float3 bitangents[UvSetCount] = { IN.m_bitangent, IN.m_bitangent };

    if (o_normal_useTexture || (o_clearCoat_enabled && o_clearCoat_normal_useTexture))
    {
        for (int i = 0; i != UvSetCount; ++i)
        {
            EvaluateTangentFrame(
                vertexNormal,
                IN.m_worldPosition, 
                isFrontFace,
                IN.m_uv[i],
                i,
                IN.m_tangent,
                IN.m_bitangent,
                tangents[i],
                bitangents[i]);
        }
    }

    // ------- Depth -------

    depthNDC = IN.m_position.z;
    bool displacementIsClipped = false;

    Surface surface;
    surface.transmission.InitializeToZero();
    surface.position = IN.m_worldPosition.xyz;
    surface.normal = vertexNormal;
    surface.vertexNormal = vertexNormal;

    // ------- Alpha & Clip -------
    float alpha = GetAlphaAndClip(IN.m_uv);

    EvaluateSixPointSurface(vertexNormal, IN.m_uv, tangents, bitangents, isFrontFace, displacementIsClipped, surface);

    // ------- Lighting Data -------

    LightingData lightingData;

    // Light iterator
    lightingData.tileIterator.Init(IN.m_position, PassSrg::m_lightListRemapped, PassSrg::m_tileLightData);
    lightingData.Init(surface.position, surface.normal, surface.roughnessLinear);

    // Diffuse and Specular response (used in IBL calculations)
    lightingData.specularResponse = FresnelSchlickWithRoughness(lightingData.NdotV, surface.specularF0, surface.roughnessLinear);
    lightingData.diffuseResponse = 1.0 - lightingData.specularResponse;

    if(o_clearCoat_feature_enabled)
    {
        // Clear coat layer has fixed IOR = 1.5 and transparent => F0 = (1.5 - 1)^2 / (1.5 + 1)^2 = 0.04
        lightingData.diffuseResponse *= 1.0 - (FresnelSchlickWithRoughness(lightingData.NdotV, float3(0.04, 0.04, 0.04), surface.clearCoat.roughness) * surface.clearCoat.factor);
    }

    // ------- Multiscatter -------

    lightingData.CalculateMultiscatterCompensation(surface.specularF0, o_specularF0_enableMultiScatterCompensation);

    // ------- Lighting Calculation -------

    // Apply Decals
    ApplyDecals(lightingData.tileIterator, surface);

    // Apply Direct Lighting
    ApplyDirectLighting(surface, lightingData, IN.m_position);

    // Apply Image Based Lighting (IBL)
    ApplyIBL(surface, lightingData);

    // Finalize Lighting
    lightingData.FinalizeLighting();

    PbrLightingOutput lightingOutput = GetPbrLightingOutput(surface, lightingData, alpha);

    // ------- Opacity -------

    if (o_opacity_mode == OpacityMode::Blended)
    {
        // Increase opacity at grazing angles for surfaces with a low m_opacityAffectsSpecularFactor.
        // For m_opacityAffectsSpecularFactor values close to 0, that indicates a transparent surface
        // like glass, so it becomes less transparent at grazing angles. For m_opacityAffectsSpecularFactor
        // values close to 1.0, that indicates the absence of a surface entirely, so this effect should
        // not apply.
        float fresnelAlpha = FresnelSchlickWithRoughness(lightingData.NdotV, alpha, surface.roughnessLinear).x;
        alpha = lerp(fresnelAlpha, alpha, MaterialSrg::m_opacityAffectsSpecularFactor);

        // [GFX_TODO ATOM-13187] PbrLighting shouldn't be writing directly to render targets. It's confusing when
        // specular is being added to diffuse just because we're calling render target 0 "diffuse".

        // For blended mode, we do (dest * alpha) + (source * 1.0). This allows the specular
        // to be added on top of the diffuse, but then the diffuse must be pre-multiplied.
        // It's done this way because surface transparency doesn't really change specular response (eg, glass).

        lightingOutput.m_diffuseColor.rgb *= lightingOutput.m_diffuseColor.w; // pre-multiply diffuse
        
        // Add specular. m_opacityAffectsSpecularFactor controls how much the alpha masks out specular contribution.
        float3 specular = lightingOutput.m_specularColor.rgb;
        specular = lerp(specular, specular * lightingOutput.m_diffuseColor.w, MaterialSrg::m_opacityAffectsSpecularFactor);
        lightingOutput.m_diffuseColor.rgb += specular;

        lightingOutput.m_diffuseColor.w = alpha;
    }

    return lightingOutput;
}

ForwardPassOutputWithDepth SixPointLighting_ForwardPassPS(VSOutput IN, bool isFrontFace : SV_IsFrontFace)
{
    ForwardPassOutputWithDepth OUT;
    float depth;

    PbrLightingOutput lightingOutput = ForwardPassPS_Common(IN, isFrontFace, depth);

#ifdef UNIFIED_FORWARD_OUTPUT
    OUT.m_color.rgb = lightingOutput.m_diffuseColor.rgb + lightingOutput.m_specularColor.rgb;
    OUT.m_color.a = lightingOutput.m_diffuseColor.a;
    OUT.m_depth = depth;
#else
    OUT.m_diffuseColor = lightingOutput.m_diffuseColor;
    OUT.m_specularColor = lightingOutput.m_specularColor;
    OUT.m_specularF0 = lightingOutput.m_specularF0;
    OUT.m_albedo = lightingOutput.m_albedo;
    OUT.m_normal = lightingOutput.m_normal;
    OUT.m_depth = depth;
#endif
    return OUT;
}

[earlydepthstencil]
ForwardPassOutput SixPointLighting_ForwardPassPS_EDS(VSOutput IN, bool isFrontFace : SV_IsFrontFace)
{
    ForwardPassOutput OUT;
    float depth;

    PbrLightingOutput lightingOutput = ForwardPassPS_Common(IN, isFrontFace, depth);

#ifdef UNIFIED_FORWARD_OUTPUT
    OUT.m_color.rgb = lightingOutput.m_diffuseColor.rgb + lightingOutput.m_specularColor.rgb;
    OUT.m_color.a = lightingOutput.m_diffuseColor.a;
#else
    OUT.m_diffuseColor = lightingOutput.m_diffuseColor;
    OUT.m_specularColor = lightingOutput.m_specularColor;
    OUT.m_specularF0 = lightingOutput.m_specularF0;
    OUT.m_albedo = lightingOutput.m_albedo;
    OUT.m_normal = lightingOutput.m_normal;
#endif
    return OUT;
}